<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Temperature, Humidity & Efficiency Dashboard</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #f4f4f9;
      color: #333;
    }

    h1 {
      margin-top: 20px;
      font-size: 2em;
      color: #4CAF50;
      text-align: center;
    }

    .dashboard {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: #ffffff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      width: 90%;
      max-width: 600px;
      margin-top: 20px;
    }

    .cards {
      display: flex;
      justify-content: space-between;
      width: 100%;
      margin-top: 10px;
    }

    .card {
      flex: 1;
      margin: 10px;
      padding: 20px;
      border-radius: 8px;
      background-color: #f9f9f9;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
      align-items: center;
      text-align: center;
      transition: transform 0.2s;
    }

    .card:hover {
      transform: scale(1.05);
    }

    .icon {
      font-size: 2em;
      margin-bottom: 10px;
    }

    .temperature-card .icon {
      color: #FF5733;
    }

    .humidity-card .icon {
      color: #33A2FF;
    }

    .card h2 {
      font-size: 1.2em;
      color: #555;
    }

    .card p {
      font-size: 1.5em;
      margin: 5px 0;
      color: #333;
    }

    .chartContainer {
      width: 90%;
      max-width: 800px;
      margin-top: 20px;
    }

    .formula-container {
      text-align: center;
      margin-top: 20px;
      padding: 10px;
      background-color: #f9f9f9;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      max-width: 800px;
    }

    .formula {
      font-size: 1.1em;
      font-weight: bold;
      color: #333;
    }

    .formula-explanation {
      font-size: 0.9em;
      color: #555;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <h1>Temperature, Humidity & Efficiency Dashboard</h1>

  <div class="dashboard">
    <div class="cards">
      <div class="card temperature-card">
        <span class="icon">üå°Ô∏è</span>
        <h2>Temperature</h2>
        <p id="temperature">-- ¬∞C</p>
      </div>
      <div class="card humidity-card">
        <span class="icon">üíß</span>
        <h2>Humidity</h2>
        <p id="humidity">-- %</p>
      </div>
    </div>
  </div>

  <!-- Chart Containers -->
  <div class="chartContainer">
    <canvas id="tempHumidityChart"></canvas>
  </div>
  <div class="chartContainer">
    <canvas id="efficiencyChart"></canvas>
  </div>

  <!-- Efficiency Formula Explanation -->
  <div class="formula-container">
    <p class="formula">Efficiency (%) = 100 - (Temperature √ó 0.5 + Humidity √ó 0.3)</p>
    <p class="formula-explanation">
      This equation is used to approximate the efficiency of the photovoltaic system based on temperature and humidity. 
      Higher temperatures and humidity levels generally reduce efficiency, which is reflected by this formula.
      Adjust the coefficients as needed to better model your system's real-world behavior.
    </p>
  </div>

  <script>
    // Initialize Temperature and Humidity Chart
    const tempHumidityCtx = document.getElementById('tempHumidityChart').getContext('2d');
    const tempHumidityChart = new Chart(tempHumidityCtx, {
      type: 'line',
      data: {
        labels: [], // Time labels
        datasets: [
          {
            label: 'Temperature (¬∞C)',
            data: [],
            borderColor: 'rgb(255, 99, 132)',
            backgroundColor: 'rgba(255, 99, 132, 0.2)',
            fill: true,
            tension: 0.1
          },
          {
            label: 'Humidity (%)',
            data: [],
            borderColor: 'rgb(54, 162, 235)',
            backgroundColor: 'rgba(54, 162, 235, 0.2)',
            fill: true,
            tension: 0.1
          }
        ]
      },
      options: {
        responsive: true,
        scales: {
          x: { title: { display: true, text: 'Time' }},
          y: { title: { display: true, text: 'Value' }}
        }
      }
    });

    // Initialize Efficiency Chart
    const efficiencyCtx = document.getElementById('efficiencyChart').getContext('2d');
    const efficiencyChart = new Chart(efficiencyCtx, {
      type: 'line',
      data: {
        labels: [], // Time labels
        datasets: [
          {
            label: 'Efficiency (%)',
            data: [],
            borderColor: 'rgb(75, 192, 192)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            fill: true,
            tension: 0.1
          }
        ]
      },
      options: {
        responsive: true,
        scales: {
          x: { title: { display: true, text: 'Time' }},
          y: { title: { display: true, text: 'Efficiency (%)' }}
        }
      }
    });

    // Fetch data and update charts
    async function fetchCurrentData() {
      try {
        const response = await fetch('/api/temperature/latest');
        const data = await response.json();
        document.getElementById('temperature').innerText = `${data.temperature} ¬∞C`;
        document.getElementById('humidity').innerText = `${data.humidity} %`;
      } catch (error) {
        console.error('Error fetching current data:', error);
        document.getElementById('temperature').innerText = 'Error';
        document.getElementById('humidity').innerText = 'Error';
      }
    }

    async function fetchHistoricalData() {
      try {
        const response = await fetch('/api/temperature/history');
        const data = await response.json();

        // Extract data for charts
        const labels = data.map(entry => new Date(entry.createdAt).toLocaleTimeString());
        const temperatureData = data.map(entry => entry.temperature);
        const humidityData = data.map(entry => entry.humidity);

        // Efficiency calculation (example function)
        const efficiencyData = temperatureData.map((temp, i) => {
          const humidity = humidityData[i];
          return 100 - (temp * 0.5 + humidity * 0.3); // Example formula
        });

        // Update charts
        tempHumidityChart.data.labels = labels;
        tempHumidityChart.data.datasets[0].data = temperatureData;
        tempHumidityChart.data.datasets[1].data = humidityData;
        tempHumidityChart.update();

        efficiencyChart.data.labels = labels;
        efficiencyChart.data.datasets[0].data = efficiencyData;
        efficiencyChart.update();
      } catch (error) {
        console.error('Error fetching historical data:', error);
      }
    }

    // Fetch initial data and set intervals to update
    fetchCurrentData();
    fetchHistoricalData();
    setInterval(fetchCurrentData, 10000); // Update current data every 10 seconds
    setInterval(fetchHistoricalData, 60000); // Update historical data every 60 seconds
  </script>
</body>
</html>