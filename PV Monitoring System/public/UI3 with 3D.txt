
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Temperature & Humidity Dashboard with PV Efficiency</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      height: 100vh;
      margin: 0;
      background-color: #f4f4f9;
    }
    .dashboard {
      text-align: center;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      background-color: #ffffff;
      width: 90%;
      max-width: 600px;
      margin-top: 20px;
    }
    h1 {
      color: #333;
    }
    .data {
      font-size: 1.2em;
      color: #555;
    }
    #chartContainer, #efficiency3D {
      width: 90%;
      max-width: 800px;
      margin-top: 20px;
    }
  </style>
</head>
<body>
  <div class="dashboard">
    <h1>Temperature & Humidity Dashboard</h1>
    <p id="temperature" class="data">Loading temperature...</p>
    <p id="humidity" class="data">Loading humidity...</p>
  </div>

  <!-- Temperature & Humidity Chart -->
  <div id="chartContainer">
    <canvas id="tempHumidityChart"></canvas>
  </div>

  <!-- Efficiency 3D Chart -->
  <div id="efficiency3D"></div>

  <script>
    // Initialize temperature & humidity line chart
    const ctx = document.getElementById('tempHumidityChart').getContext('2d');
    const tempHumidityChart = new Chart(ctx, {
      type: 'line',
      data: {
        labels: [],
        datasets: [
          {
            label: 'Temperature (°C)',
            data: [],
            borderColor: 'rgb(255, 99, 132)',
            fill: false,
            tension: 0.1
          },
          {
            label: 'Humidity (%)',
            data: [],
            borderColor: 'rgb(54, 162, 235)',
            fill: false,
            tension: 0.1
          }
        ]
      },
      options: {
        responsive: true,
        scales: {
          x: { title: { display: true, text: 'Time' }},
          y: { title: { display: true, text: 'Value' }}
        }
      }
    });

    // Fetch temperature and humidity data
    async function fetchCurrentData() {
      try {
        const response = await fetch('/api/temperature/latest');
        const data = await response.json();
        document.getElementById('temperature').innerText = `Temperature: ${data.temperature} °C`;
        document.getElementById('humidity').innerText = `Humidity: ${data.humidity} %`;
      } catch (error) {
        console.error('Error fetching current data:', error);
        document.getElementById('temperature').innerText = 'Error loading temperature';
        document.getElementById('humidity').innerText = 'Error loading humidity';
      }
    }

    async function fetchHistoricalData() {
      try {
        const response = await fetch('/api/temperature/history');
        const data = await response.json();
        const labels = data.map(entry => new Date(entry.createdAt).toLocaleTimeString());
        const temperatureData = data.map(entry => entry.temperature);
        const humidityData = data.map(entry => entry.humidity);
        tempHumidityChart.data.labels = labels;
        tempHumidityChart.data.datasets[0].data = temperatureData;
        tempHumidityChart.data.datasets[1].data = humidityData;
        tempHumidityChart.update();
      } catch (error) {
        console.error('Error fetching historical data:', error);
      }
    }

    fetchCurrentData();
    fetchHistoricalData();
    setInterval(fetchCurrentData, 10000);
    setInterval(fetchHistoricalData, 60000);

    // Efficiency calculation function
    function calculateEfficiency(T, H) {
      const E25 = 20; // Baseline efficiency at 25°C and 0% humidity
      const TempCoeff = -0.0045;
      return E25 * (1 + TempCoeff * (T - 25)) * (1 - H / 100 * 0.05);
    }

    // Generate efficiency data for 3D plot
    function generateEfficiencyData() {
      const temperatures = Array.from({ length: 81 }, (_, i) => i); // 0°C to 80°C
      const humidities = Array.from({ length: 101 }, (_, i) => i);   // 0% to 100%
      const efficiencyValues = [];

      for (const temp of temperatures) {
        const row = [];
        for (const humidity of humidities) {
          row.push(calculateEfficiency(temp, humidity));
        }
        efficiencyValues.push(row);
      }

      return { temperatures, humidities, efficiencyValues };
    }

    // Render 3D efficiency graph
    function renderEfficiency3D() {
      const { temperatures, humidities, efficiencyValues } = generateEfficiencyData();

      const data = [{
        z: efficiencyValues,
        x: temperatures,
        y: humidities,
        type: 'surface',
        colorscale: 'Viridis'
      }];

      const layout = {
        title: 'PV Efficiency as a Function of Temperature and Humidity',
        scene: {
          xaxis: { title: 'Temperature (°C)' },
          yaxis: { title: 'Humidity (%)' },
          zaxis: { title: 'Efficiency (%)' }
        },
        autosize: true
      };

      Plotly.newPlot('efficiency3D', data, layout);
    }

    // Call the function to render the 3D plot
    renderEfficiency3D();
  </script>
</body>
</html>